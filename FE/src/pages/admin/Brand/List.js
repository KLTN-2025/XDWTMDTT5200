import {
  Button,
  Card,
  Input,
  Table,
  Tag,
  Form,
  Row,
  Col,
  Select,
  message,
} from "antd";
import { useMemo, useState, useCallback } from "react";
import { getCookie } from "../../../helpers/cookie";
import DeleteItem from "../../../components/DeleteItem";
import NoRole from "../../../components/NoRole";
import useBrands from "../../../hooks/admin/useBrands";
import BrandEdit from "./Edit";

function BrandList() {
  const permissions = useMemo(
    () => JSON.parse(localStorage.getItem("permissions")) || [],
    []
  );

  const token = getCookie("token");

  // State qu·∫£n l√Ω
  const [limit] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  const [keyword, setKeyword] = useState("");
  const [sortKey, setSortKey] = useState("default");
  const [sortType, setSortType] = useState("asc");

  const { updateStatus, brandsQuery } = useBrands({
    token,
    currentPage,
    limit,
    keyword,
    sortKey,
    sortType,
  });

  // D·ªØ li·ªáu th∆∞∆°ng hi·ªáu v√† t·ªïng trang
  const data = brandsQuery.data?.brands || [];
  const totalPage = brandsQuery.data?.totalPage || 0;

  // üîÑ Reload table khi c·∫ßn
  const handleReload = useCallback(() => {
    brandsQuery.refetch();
  }, [brandsQuery]);

  // üü© X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i
  const handleClickStatus = useCallback(
    (e) => {
      const [statusChange, id] = e.target.dataset.id.split("-");
      if (permissions.includes("brands_edit")) {
        updateStatus.mutate({ statusChange, id });
      } else {
        message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a th∆∞∆°ng hi·ªáu!");
      }
    },
    [permissions, updateStatus]
  );

  // üîç X·ª≠ l√Ω t√¨m ki·∫øm
  const onFinish = useCallback((values) => {
    setKeyword(values.keyword?.trim() || "");
    setCurrentPage(1);
  }, []);

  // ‚öôÔ∏è Thay ƒë·ªïi s·∫Øp x·∫øp
  const handleChangePosition = useCallback((value) => {
    setSortKey(value === "default" ? "default" : "position");
    setSortType(value);
  }, []);

  // üîß C·∫•u h√¨nh c·ªôt Table
  const columns = useMemo(
    () => [
      {
        title: "T√™n s·∫£n ph·∫©m",
        dataIndex: "title",
        key: "title",
      },
      {
        title: "·∫¢nh",
        dataIndex: "thumbnail",
        key: "thumbnail",
        render: (thumbnail) => (
          <img
            src={thumbnail}
            alt="thumbnail"
            style={{ width: 70, marginTop: 10 }}
          />
        ),
      },
      {
        title: "V·ªã tr√≠",
        dataIndex: "position",
        key: "position",
      },
      {
        title: "Tr·∫°ng th√°i",
        dataIndex: "status",
        key: "status",
        render: (_, record) =>
          <>
            {permissions.includes("brands_edit") ? (
              <>
                <Tag
                  color={record.status === "inactive" ? "#cd201f" : "#55acee"}
                  data-id={
                    record.status === "inactive"
                      ? `active-${record._id}`
                      : `inactive-${record._id}`
                  }
                  onClick={handleClickStatus}
                  style={{ cursor: "pointer" }}
                >
                  {record.status === "inactive" ? "Ng·ª´ng ho·∫°t ƒë·ªông" : "Ho·∫°t ƒë·ªông"}
                </Tag>
              </>
            ) : (
              <>
                <Tag
                  color={record.status === "inactive" ? "#cd201f" : "#55acee"}
                  data-id={
                    record.status === "inactive"
                      ? `active-${record._id}`
                      : `inactive-${record._id}`
                  }
                >
                  {record.status === "inactive" ? "Ng·ª´ng ho·∫°t ƒë·ªông" : "Ho·∫°t ƒë·ªông"}
                </Tag>
              </>
            )}
          </>
      },
      {
        title: "H√†nh ƒë·ªông",
        key: "actions",
        render: (_, record) => (
          <div style={{ display: "flex", gap: 8 }}>
            {permissions.includes("brands_edit") && (
              <BrandEdit record={record} key={`edit-${record._id}`} />
            )}
            {permissions.includes("brands_del") && (
              <DeleteItem
                record={record}
                key={`delete-${record._id}`}
                typeDelete="brand"
                onReload={handleReload}
              />
            )}
          </div>
        ),
      },
    ],
    [permissions, handleClickStatus, handleReload]
  );

  // üß† Kh√¥ng c√≥ quy·ªÅn th√¨ return lu√¥n
  if (!permissions.includes("brands_view")) return <NoRole />;

  return (
    <Card title="Danh s√°ch th∆∞∆°ng hi·ªáu">
      {/* T√¨m ki·∫øm + S·∫Øp x·∫øp */}
      <Form onFinish={onFinish} layout="vertical">
        <Row gutter={[12, 12]}>
          <Col span={22}>
            <Form.Item name="keyword">
              <Input
                allowClear
                placeholder="T√¨m ki·∫øm th∆∞∆°ng hi·ªáu"
                onChange={(e) => setKeyword(e.target.value)}
              />
            </Form.Item>
          </Col>
          <Col span={2}>
            <Form.Item name="btnSearch">
              <Button type="primary" htmlType="submit">
                T√¨m ki·∫øm
              </Button>
            </Form.Item>
          </Col>
          <Col span={4}>
            <Form.Item label="V·ªã tr√≠" name="sortPosition" initialValue="default">
              <Select
                onChange={handleChangePosition}
                options={[
                  { label: "M·∫∑c ƒë·ªãnh", value: "default" },
                  { label: "TƒÉng", value: "asc" },
                  { label: "Gi·∫£m", value: "desc" },
                ]}
              />
            </Form.Item>
          </Col>
        </Row>
      </Form>

      {/* B·∫£ng th∆∞∆°ng hi·ªáu */}
      <Card style={{ marginTop: 10 }} type="inner">
        <Table
          dataSource={data}
          columns={columns}
          rowKey="_id"
          loading={brandsQuery.isLoading}
          pagination={{
            current: currentPage,
            pageSize: limit,
            total: limit * totalPage,
            showSizeChanger: false,
            style: { display: "flex", justifyContent: "center" },
            onChange: (page) => setCurrentPage(page),
          }}
        />
      </Card>
    </Card>
  );
}

export default BrandList;
